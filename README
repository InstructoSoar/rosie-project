########################################
#
#  Rosie Project
#  University of Michigan
#
########################################

Instructions for setting up the rosie project
These are aimed towards Ubuntu, 
results on other linux distros may vary.

1. Setup

First setup your environment variables by adding the following to ~/.bashrc
  export ROSIE_PROJ=/path/to/rosie/project
  source $ROSIE_PROJ/envvars

Next, load all submodules using the following:
  git submodule init
  git submodule update

Next, install all prerequisties.
  There is a list of them in the file prereqs.sh

  NOTE: we recommend using openjdk 7 for this project, 
    april seems to have stability issues with java 8

Build Lcm
  cd lcm
  mkdir build
  cd build
  cmake ..
  make
  sudo make install

Build April
  cd april/java
  ant

  If you get an error about Base64, edit the file
    april/java/src/april/config/Config.java line 655
    change Base64 to april.util.Base64

  If you get an error about missing jni_md.h, make sure you are using java 7

Build LibFreenect
  cd libfreenect
  mkdir build
  cd build
  cmake ..
  make
  sudo make install
  sudo ldconfig /usr/local/lib64

Build Soar
  cd soar
  scons all

Build rosie, rosie tools, and probcog
  either use ant (e.g. go to rosie/java and type 'ant')
  or use the corresponding script from the scripts directory (e.g. 'build_rosie')

2. Running via scripts

There are a number of useful scripts in the scripts directory,
  and should automatically be sourced by envvars

run_probcog <world> (the world file will tab complete)
build_agent <agent> (e.g. tabletop, will tab complete)
run_rosie <agent> (e.g. tabletop, will tab complete)


3. Contents

LCM
https://code.google.com/p/lcm

APRIL
https://april.eecs.umich.edu/wiki

LIBFREENECT
https://openkinect.org/wiki/Getting_Started

SOAR
https://github.com/SoarGroup/Soar/wiki

PROBCOG
https://github.com/amininger/probcog

ROSIE
https://github.com/SoarGroup/Rosie


4. Notes on git submodules

Most of the projects in this folder are included as git submodules.
Internally, they each function as a separate git repository. 
So within the probcog folder, you can treat it like a normal git repo. 

The parent repository does not track changes inside a submodule, only
what revision each submodule is at. Thus if you update a submodule, 
you only need to do a commit in the parent repository and it will 
commit the new revision. When pulling in changes, you will have to run 
'git submodule update' after merging to update the submodules. 



